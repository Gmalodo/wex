#!/usr/bin/env bash

# Enable debug mode.
# Is will write logs into /tmp/debug.log
# And tests result will not be encapsulated / evaluated.
if [[ ${2} == "-d" ]];then
  WEX_TEST_DEBUG=true

  echo "Debug mode enabled "

  # Clear log file on root script call.
  if [[ ${WEX_ROOT_SCRIPT} == true ]];then
    # Clear log file
    rm -f ${WEX_LOG_FILE}
    touch ${WEX_LOG_FILE}
  fi
  # Create log method.
  wexLog() {
    if [[ ${WEX_DEBUG} == true ]];then
      TRACE=(${FUNCNAME[@]:2})
      echo -e $(date '+%Y-%m-%d %H:%M:%S')" "$(printf %${WEX_DEEP_LEVEL}s |tr " " ".")"["${TRACE[0]}"] > "${1} >> ${WEX_LOG_FILE}
    fi;
  }
else
  WEX_TEST_DEBUG=false

  wexLog() {
    : # Do nothing
  }
fi

# Import wex
. "wex" false

# List only directories.
WEX_TEST_NAMESPACES=($(ls -d ${WEX_DIR_BASH}*/))
WEX_TEST_DIR_TMP=${WEX_DIR_TMP}"test/"
WEX_TEST_RUN_SCRIPT=${1}
WEX_NON_INTERACTIVE=true

wexTestSampleInit() {
  TMP_FILE_NAME=${1}
  # Create temp dir if missing.
  mkdir -p ${WEX_TEST_DIR_TMP}
  # Copy sample file.
  cp ${WEX_TEST_RUN_DIR_SAMPLES}${TMP_FILE_NAME} ${WEX_TEST_DIR_TMP}
  # Return file name
  echo ${WEX_TEST_DIR_TMP}${TMP_FILE_NAME}
}

wexTestError() {
  WEX_TEST_HAS_ERROR=true
  RED='\033[1;31m'
  NC='\033[0m'
  echo -e "${RED}"
  echo "Test error : "${1}
  echo -e "${NC}"
  exit
}

wexTestAssertEqual() {
  TEST_VARIABLE=${1}
  EXPECTED_VALUE=${2}
  if [ "${TEST_VARIABLE}" != "${EXPECTED_VALUE}" ]; then
    WEX_TEST_HAS_ERROR=true
    RED='\033[1;31m'
    NC='\033[0m'
    echo -e "${RED}"
    echo "Assertion are not equal";
    echo "  - Got : ${TEST_VARIABLE}";
    echo "  - Expected : ${EXPECTED_VALUE}";
    echo -e "${NC}"
    exit
  fi;
}

wexArrayJoin() {
  local d=$1;
  shift;
  echo -n "$1";
  shift;
  printf "%s" "${@/#/$d}";
}

wexTestClearTempDir() {
  # Empty temp directory
  rm -rf ${WEX_TEST_DIR_TMP}
  mkdir -p ${WEX_TEST_DIR_TMP}
}

for DIR in ${WEX_TEST_NAMESPACES[@]}
do
  NAMESPACE=$(basename ${DIR})
  SPLIT=($(echo ${WEX_TEST_RUN_SCRIPT}| tr ":" "\n"))
  # If no specified script
  # Or ne specified namespace
  # Or a namespace is specified and the same as current
  if [[ -z "${WEX_TEST_RUN_SCRIPT:+x}" ]] || [[ -z "${SPLIT[1]:+x}" ]] || [[ ${SPLIT[0]} == ${NAMESPACE} ]];then
    echo ""
    echo "Testing namespace : "${NAMESPACE}
    echo "-------------------"
    echo ""

    # Namespace have been specified
    if [ ! -z "${SPLIT[1]:+x}" ] && [[ ${SPLIT[0]} == ${NAMESPACE} ]];then
      echo "  namespace specified"
    fi

    WEX_TEST_RUN_DIR_CURRENT=${WEX_DIR_BASH}${NAMESPACE}"/_tests/"
    WEX_TEST_RUN_DIR_SAMPLES=${WEX_TEST_RUN_DIR_CURRENT}"_samples/"

    # Dir exists.
    if [[ -d ${WEX_TEST_RUN_DIR_CURRENT} ]];then
      # GEt all folder.
      WEX_TESTS_NAMESPACE_FOLDERS=($(ls ${WEX_TEST_RUN_DIR_CURRENT}))

      for WEX_TEST_DIR_NAME in ${WEX_TESTS_NAMESPACE_FOLDERS[@]}
      do
        WEX_TEST_FIRST_LETTER="$(echo ${WEX_TEST_DIR_NAME} | head -c 1)"

        # Exclude folders with _ prefix.
        if [[ "${WEX_TEST_FIRST_LETTER}" != "_" ]]; then
          WEX_TESTS_NAMESPACE_FOLDERS_FILES=($(ls ${WEX_TEST_RUN_DIR_CURRENT}${WEX_TEST_DIR_NAME}))
          # Iterate group folder
          for WEX_TEST_FILE in ${WEX_TESTS_NAMESPACE_FOLDERS_FILES[@]}
          do
            WEX_TEST_FILE_NAME=$(basename "${WEX_TEST_FILE}")
            WEX_TEST_SCRIPT_CALL_NAME=${WEX_TEST_DIR_NAME}"/${WEX_TEST_FILE_NAME%.*}"
            WEX_TEST_FIRST_LETTER="$(echo ${WEX_TEST_FILE} | head -c 1)"

            # Exclude files with _ prefix.
            # Allow to specify single script name to test.
            if [[ "${WEX_TEST_FIRST_LETTER}" != "_" && ("${WEX_TEST_RUN_SCRIPT}" == "" || ${WEX_TEST_RUN_SCRIPT} == ${WEX_TEST_SCRIPT_CALL_NAME} || ${WEX_TEST_RUN_SCRIPT} == ${NAMESPACE}::${WEX_TEST_SCRIPT_CALL_NAME}) ]]; then
              WEX_TEST_METHOD_NAME=$(wexMethodName ${WEX_TEST_SCRIPT_CALL_NAME})

              # Build script file path.
              _TEST_SCRIPT_FILE="${WEX_TEST_RUN_DIR_CURRENT}${WEX_TEST_SCRIPT_CALL_NAME}.sh"

              # Clear defined function
              _TEST_ARGUMENTS=

              echo "Testing ${WEX_TEST_SCRIPT_CALL_NAME}"

              # Import test methods
              . "${_TEST_SCRIPT_FILE}"

              echo "Execute wex ${WEX_TEST_SCRIPT_CALL_NAME} ${_TEST_ARGUMENTS[@]}"

              # Go to test dir.
              cd ${WEX_TEST_RUN_DIR_CURRENT}

              WEX_TEST_HAS_ERROR=false
              if [[ $(type -t "${WEX_TEST_METHOD_NAME}Test" 2>/dev/null) == function ]]; then
                echo "  > Custom ${WEX_TEST_METHOD_NAME}Test method"
                if [[ ${WEX_TEST_DEBUG} == true ]];then
                  # Do not encapsulate result
                  ${WEX_TEST_METHOD_NAME}Test ${WEX_TEST_METHOD_NAME}Test ${_TEST_ARGUMENTS[@]}
                else
                  # Run script and store result.
                  testResult=$(${WEX_TEST_METHOD_NAME}Test ${WEX_TEST_METHOD_NAME}Test ${_TEST_ARGUMENTS[@]})
                fi
              else
                echo "  > Auto test method : wex ${WEX_TEST_SCRIPT_CALL_NAME} --non_interactive ${_TEST_ARGUMENTS[@]}"
                if [[ ${WEX_TEST_DEBUG} == true ]];then
                  # Do not encapsulate result
                  wex ${WEX_TEST_SCRIPT_CALL_NAME} --non_interactive ${_TEST_ARGUMENTS[@]}
                else
                  # Run script and store result.
                  testResult=$(wex ${WEX_TEST_SCRIPT_CALL_NAME} --non_interactive ${_TEST_ARGUMENTS[@]})
                fi
              fi;

              if [[ ${WEX_TEST_DEBUG} == true ]];then
                # Do not check result in debug mode
                echo -e "Test complete (debug mode)\n"
                cat ${WEX_LOG_FILE}
              else
                if [[ "${testResult}" == "" && ${WEX_TEST_HAS_ERROR} == false ]]; then
                  GREEN='\033[1;32m'
                  NC='\033[0m'
                  echo -e "${GREEN}  > Test success${NC}"
                else
                  # Print result for info.
                  echo "  > Test response : ${testResult}"
                fi

                # Run Verify method if exists.
                if [[ $(type -t "${WEX_TEST_METHOD_NAME}Verify" 2>/dev/null) == function ]]; then
                  ${WEX_TEST_METHOD_NAME}Verify "${testResult}"
                fi;
              fi
            fi;
          done;
        fi;
      done
      WEX_TEST_DIR_NAME=$(basename "${WEX_TEST_DIR}")
    fi;

  fi;
done;
