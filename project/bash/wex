#!/usr/bin/env bash

if [ -z "${WEX_INIT:+x}" ];then
  WEX_INIT=true
  WEX_NAMESPACE_DEFAULT="default"
  WEX_DIR_BASH="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )/"
  WEX_DIR_ROOT=$(realpath ${WEX_DIR_BASH}"../")"/"
  WEX_DIR_ROOT_REPO=$(realpath ${WEX_DIR_ROOT}"../")"/"
  WEX_DIR_SAMPLES=${WEX_DIR_ROOT}samples/
  WEX_DIR_BASH_DEFAULT="${WEX_DIR_BASH}${WEX_NAMESPACE_DEFAULT}/"
  WEX_DIR_TMP=${WEX_DIR_ROOT}"tmp/"
  WEX_URL_GITHUB="https://github.com/wexample/"
  WEX_URL_SCRIPTS="https://raw.githubusercontent.com/wexample/scripts/master/project/bash/default/"
  WEX_LOCAL_DIR="/opt/wexample/"
  WEX_NON_INTERACTIVE=false

  if [ -z "${WEX_DEEP_LEVEL:+x}" ];then
    WEX_DEEP_LEVEL=0
  fi

  # Secondary call var does not exists.
  if [ -z "${WEX_ROOT_SCRIPT:+x}" ];then
    WEX_ROOT_SCRIPT=true
  else
    WEX_ROOT_SCRIPT=false
  fi

  # Check bash version.
  if [ -z ${WEX_BASH_VERSION+x} ]; then
    WEX_BASH_VERSION_MIN='4'
    WEX_BASH_VERSION=$(sed -n "s/\([[:digit:]]\{0,\}\)\([\.].\{0,\}\)/\1/p" <<< ${BASH_VERSION})
    if [ ${WEX_BASH_VERSION} != ${WEX_BASH_VERSION_MIN} ]; then
      echo "Wexample error, need to run on bash version "${WEX_BASH_VERSION_MIN}
      exit
    fi;
  fi;

  wexLog() {
    # Nothing if debug is disabled
    :
  }

  wexUpperCaseFirstLetter() {
    echo $(tr '[:lower:]' '[:upper:]' <<< ${1:0:1})${1:1}
  }

  wexMethodName() {
    SPLIT=(${1//// })
    echo ${SPLIT[0]}$(wexUpperCaseFirstLetter ${SPLIT[1]})
  }

  # Data storage access performance.
  wexLoadVariables() {
    local STORAGE=${WEX_DIR_TMP}globalVariablesLocalStorage

    if [[ -f ${STORAGE} ]];then
      . ${STORAGE};
    fi
  }

  wex() {
    WEX_SHOW_INTRO=false
    WEX_REMOVE_DOWNLOADED_SCRIPT=false
    WEX_SCRIPT_CALL_NAME=${1}

    if [ ${WEX_SCRIPT_CALL_NAME} == "wexample" ];then
      return
    fi;

    # Get parameters keeping quoted strings.
    WEX_ARGUMENTS=''
    whitespace="[[:space:]]"
    for i in "${@:2}"
    do
        if [[ $i =~ $whitespace ]]
        then
            # TODO Temp; if success, use it in place on sed
            ARG_NAME=$(echo ${i} | cut -d"=" -f1)
            ARG_VALUE=${i#*\=}
            i="-"${ARG_NAME}"=\"${ARG_VALUE}\""
        fi
        WEX_ARGUMENTS+=' '${i}
    done

    # Check if file exists locally.
    # It allow to override behaviors from location where script is executed,
    # especially for contextual website scripts.
    # > We may change execution order : first detect context than using default.
    local WEX_SCRIPT_FILE="./wex/bash/${WEX_NAMESPACE_DEFAULT}/${WEX_SCRIPT_CALL_NAME}.sh"

    # Namespace
    local WEX_NAMESPACE=${WEX_NAMESPACE_DEFAULT}

    # File does not exists locally.
    if [ ! -f ${WEX_SCRIPT_FILE} ]; then

      # Allow specified context.
      if [[ ${WEX_SCRIPT_CALL_NAME} == *"::"* ]]; then
        SPLIT=($(echo ${WEX_SCRIPT_CALL_NAME}| tr ":" "\n"))
        WEX_NAMESPACE_TEST=${SPLIT[0]}
        WEX_SCRIPT_CALL_NAME=${SPLIT[1]}
      # Check if we are on a "wexample" context (.wex file in calling folder).
      elif [ -f ".wex" ]; then
        WEX_NAMESPACE_TEST="wexample"
      fi;

      WEX_SCRIPT_DIR=${WEX_DIR_BASH}${WEX_NAMESPACE_TEST}/${WEX_SCRIPT_CALL_NAME}
      WEX_SCRIPT_FILE=${WEX_SCRIPT_DIR}.sh

      # Use main script if still not exists.
      if [ -f ${WEX_SCRIPT_FILE} ] || [ -d ${WEX_SCRIPT_DIR} ]; then
        WEX_NAMESPACE=${WEX_NAMESPACE_TEST}
      else
        WEX_NAMESPACE=${WEX_NAMESPACE_DEFAULT}
        # Search into wexample local folder.
        WEX_SCRIPT_FILE=${WEX_DIR_BASH}${WEX_NAMESPACE_DEFAULT}/${WEX_SCRIPT_CALL_NAME}.sh
      fi;

      # Load namespace init file.
      . "${WEX_DIR_BASH}${WEX_NAMESPACE}/init.sh"
    fi;

    WEX_SCRIPT_METHOD_NAME=$(wexMethodName ${WEX_SCRIPT_CALL_NAME})

    # File does not exists.
    if [ ! -f ${WEX_SCRIPT_FILE} ]; then
      local RED='\033[1;31m'
      local NC='\033[0m'

      # Show hi
      if [ ${WEX_SCRIPT_CALL_NAME} == "hi" ]; then
        printf "${RED}<3${NC} Yeah !\n"

      # Show completion
      elif [ -d ${WEX_DIR_BASH}${WEX_NAMESPACE}"/"${WEX_SCRIPT_CALL_NAME} ];then
        local GROUP=$(basename ${WEX_DIR_BASH}${WEX_NAMESPACE}"/"${WEX_SCRIPT_CALL_NAME})
        local NAMESPACES=($(ls ${WEX_DIR_BASH}))

        for NAMESPACE in "${NAMESPACES[@]}"
        do
          local DIR=${WEX_DIR_BASH}${NAMESPACE}"/"${GROUP}

          if [ -d ${DIR} ] && [ -d ${WEX_DIR_BASH}${NAMESPACE} ]; then
            local METHODS=($(ls ${DIR}))
            local GROUP=$(basename ${DIR})

            echo ""

            for FILE in "${METHODS[@]}"
            do
              echo "  "${NAMESPACE}"::"${GROUP}"/${FILE%.*}"
            done
          fi
        done

      # Not found.
      else
        WEX_TEST_HAS_ERROR=true
        printf "  ${RED}Wex script not found${NC} ${WEX_SCRIPT_FILE} > ${WEX_SCRIPT_METHOD_NAME}()\n"
      fi;
      exit
    fi;

    # Include loaded file
    . "${WEX_SCRIPT_FILE}"

    # Init empty var.
    _ARGUMENTS=()
    # Catch arguments
    ARGS_METHOD=${WEX_SCRIPT_METHOD_NAME}"Args";

    # Execute arguments method
    if [[ $(type -t "${ARGS_METHOD}" 2>/dev/null) == function ]]; then
      # Execute command
      ${ARGS_METHOD}
    fi;

    # Add extra parameters at end of array
    _ARGUMENTS+=(
      'non_interactive ni "Non interactive mode" false'
      'help help "Help" false'
      'debug debug "Debug" false'
    )
    # Then start in negative value (length of previous table).
    _NEGATIVE_ARGS_LENGTH=3

    # We iterate first on system extra parameters
    # Using negative values allow to use clean push method on array.
    for ((i=-${_NEGATIVE_ARGS_LENGTH}; i < ${#_ARGUMENTS[@]}-${_NEGATIVE_ARGS_LENGTH}; i++)); do
      eval "PARAMS=(${_ARGUMENTS[${i}]})"
      ARG_EXPECTED_LONG=${PARAMS[0]}
      ARG_EXPECTED_SHORT=${PARAMS[1]}
      # Mark variable as empty
      local ${ARG_EXPECTED_LONG^^}=
      # Set it as null.
      eval 'unset '${ARG_EXPECTED_LONG^^}

      WEX_ARG_FOUND=false

      # Get args given,
      # ignore first one which is always method name.
      for ARG_GIVEN in "${@:2}"
      do
        ARG_GIVEN_NAME=$(sed -e 's/-\{1,2\}\([^\=]\{0,\}\)\=.\{0,\}/\1/' <<< ${ARG_GIVEN})
        ARG_GIVEN_VALUE=${ARG_GIVEN#*\=}
        if [[ ${ARG_GIVEN_NAME} == ${ARG_EXPECTED_LONG} || ${ARG_GIVEN_NAME} == ${ARG_EXPECTED_SHORT} ]]; then
          WEX_ARG_FOUND=true
          local ${ARG_EXPECTED_LONG^^}="${ARG_GIVEN_VALUE}"
        # Support --noEqualSign -nes
        elif [[ "--"${ARG_EXPECTED_LONG} == ${ARG_GIVEN} || "-"${ARG_EXPECTED_SHORT} == ${ARG_GIVEN} ]]; then
          WEX_ARG_FOUND=true
          local ${ARG_EXPECTED_LONG^^}=true
        fi
      done;

      # If an argument is not found
      # And we are not on help page.
      if [ ${WEX_ARG_FOUND} == false ] && [ -z ${HELP+x} ];then
        # Expected
        if [[ ${PARAMS[3]} == true ]]; then
          # Interactive mode allowed.
          if [ -z ${NONINTERACTIVE+x} ] || [ ${NONINTERACTIVE} == false ]; then
            echo -n ${PARAMS[2]}": "
            read ${ARG_EXPECTED_LONG^^}
          else
            echo "Error | ${WEX_SCRIPT_METHOD_NAME} | Expected argument not found : "${ARG_EXPECTED_LONG}
            # Raise an error.
            # Unable to fetch expected variable
            exit 0
          fi;
        fi;
      fi;
    done

    if [[ ! -z ${DEBUG+x} ]];then
      # Use a global alias.
      WEX_DEBUG=true

      wexLog() {
        echo -e ${@} >> ${WEX_LOG_FILE}
      }

      # Flush previous report.
      if [ "${WEX_DEEP_LEVEL}" == 0 ];then
        echo '' > ${WEX_DIR_TMP}"debug.log"
      fi
    fi

    # Show help manual
    if [ ! -z ${HELP+x} ]; then
      echo "NAME: "${WEX_SCRIPT_CALL_NAME}
      echo "  Function: "${WEX_SCRIPT_METHOD_NAME}
      echo "  File: "${WEX_SCRIPT_FILE}
      echo ""

      for ((i=-${_NEGATIVE_ARGS_LENGTH}; i < ${#_ARGUMENTS[@]}-${_NEGATIVE_ARGS_LENGTH}; i++)); do
        eval "PARAMS=(${_ARGUMENTS[${i}]})"
        ARG_EXPECTED_LONG=${PARAMS[0]}

        TEXT="--"${PARAMS[0]}" -"${PARAMS[1]}

        if [ ${PARAMS[3]} == true ]; then
          TEXT+="\n\t(required)"
        fi;

        TEXT+="\n\t\t"${PARAMS[2]}
        TEXT+="\n"

        echo -e ${TEXT}
      done;
    else
      ((WEX_DEEP_LEVEL++))
      if [ "${WEX_DEBUG}" == true ];then
        TRACE=(${FUNCNAME[@]:1})
        local WEX_LOG_FILE=${WEX_DIR_TMP}"debug.log"
        wexLog $(date '+%Y-%m-%d %H:%M:%S')" "$(printf %${WEX_DEEP_LEVEL}s |tr " " ".")"["${TRACE[0]}"] > "${1}
      fi;
      # Execute function with all parameters.
      eval ${WEX_SCRIPT_METHOD_NAME} ${WEX_ARGUMENTS}
      # Trace
      ((WEX_DEEP_LEVEL--))
    fi;
  }

fi;

# Execute run function with same arguments.
# Using false as argument allow to protect unexpected argument passing
if [ ! -z "${1+x}" ] && [ "${1}" != '' ] && [ ${1} != false ]; then
  wex "${@}"

  # In debug mode show report.
  if [ ${WEX_DEEP_LEVEL} == 0 ] && [ "${WEX_DEBUG}" == true ];then
    cat ${WEX_DIR_TMP}"debug.log"
  fi
fi;
